<% layout("layouts/boilerplate") %>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg mt-5">
                <div class="card-body text-center">
                    <h3 class="mb-4">Verify Your Email</h3>
                    <p>We've sent a verification code to <strong><%= email %></strong></p>
                    
                    <form action="/verify-otp" method="POST" novalidate class="needs-validation">
                        <div class="mb-3">
                            <p class="text-center fw-bold mb-3">Enter Verification Code</p>
                            <div class="d-flex justify-content-center gap-2 mb-3 px-4">
                                <input type="text" class="form-control otp-input" maxlength="1" pattern="\d" required>
                                <input type="text" class="form-control otp-input" maxlength="1" pattern="\d" required>
                                <input type="text" class="form-control otp-input" maxlength="1" pattern="\d" required>
                                <input type="text" class="form-control otp-input" maxlength="1" pattern="\d" required>
                                <input type="text" class="form-control otp-input" maxlength="1" pattern="\d" required>
                                <input type="text" class="form-control otp-input" maxlength="1" pattern="\d" required>
                            </div>
                            <input type="hidden" name="otp" id="otpValue">
                            
                            <div class="text-center">
                                <p class="mb-2">Time remaining: <span id="timer">00:50</span></p>
                                <button type="button" id="resendButton" class="btn btn-link" disabled>
                                    Resend Code
                                </button>
                            </div>
                        </div>
                        <button class="btn btn-success w-100">Verify</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.otp-input {
    width: 45px;
    height: 45px;
    text-align: center;
    font-size: 20px;
}
.btn-link:disabled {
    color: #6c757d;
    text-decoration: none;
    cursor: not-allowed;
}
.btn-link.active {
    color: #0d6efd;
    cursor: pointer;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const otpInputs = document.querySelectorAll('.otp-input');
    const otpValue = document.getElementById('otpValue');
    const resendButton = document.getElementById('resendButton');
    const timerDisplay = document.getElementById('timer');
    let timeLeft = 50; // 50 seconds
    let timerInterval;

    function startTimer() {
        clearInterval(timerInterval);
        timeLeft = 50;
        resendButton.disabled = true;
        resendButton.classList.remove('active');
        
        timerInterval = setInterval(() => {
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                resendButton.disabled = false;
                resendButton.classList.add('active');
                timerDisplay.textContent = '00:00';
            } else {
                const seconds = timeLeft % 60;
                timerDisplay.textContent = `00:${seconds.toString().padStart(2, '0')}`;
                timeLeft--;
            }
        }, 1000);
    }

    startTimer();

    // Auto-focus and input handling
    otpInputs.forEach((input, index) => {
        input.addEventListener('input', (e) => {
            if (e.target.value.length === 1) {
                if (index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            }
            updateOtpValue();
        });

        input.addEventListener('keydown', (e) => {
            if (e.key === 'Backspace' && !e.target.value) {
                if (index > 0) {
                    otpInputs[index - 1].focus();
                }
            }
        });
    });

    // Update hidden input with complete OTP value
    function updateOtpValue() {
        const otp = Array.from(otpInputs).map(input => input.value).join('');
        otpValue.value = otp;
    }

    // Resend OTP functionality
    resendButton.addEventListener('click', async function() {
        if (!resendButton.disabled) {
            try {
                const response = await fetch('/resend-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (response.ok) {
                    startTimer();
                    otpInputs.forEach(input => input.value = '');
                    otpValue.value = '';
                    otpInputs[0].focus();
                } else {
                    throw new Error('Failed to resend OTP');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to resend OTP. Please try again.');
            }
        }
    });
});
</script>